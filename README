ad9910 dds synthesizer firmware documentation
=============================================

Overview
--------

This is the documentation for the synthesizer board which is
meant to work with programmable pulse generator as designed by
Paul Pham

link:[http://pulse-sequencer.sf.net]

The features of the board are:

- Onboard Cyclone II FPGA for increased flexibility
- AD9910 DDS with 14Bit DAC and 1Gs/s clock
- AD9744 DAC and AD8367 VGA for pulse shaping
- 32Bit LVDS bus for high speed data transfer


This documentation is focused on the programming of the FPGA.
This is accomplished in the VHDL hardware description language.

The source code is spread over following files:
`------------------------`---------------------------
Filename                  Function
-----------------------------------------------------
dds_controller.vhd        top entity, opcode decoding
ddslib.vhd                configuration, opcode definition
dds_serial.vhd            parallel to serial decoding
fifo.vhd                  FIFO megafunction intance
phase_register.vhd        phase registers
-----------------------------------------------------

The VHDL files can be compiled with the free quartus II web edition which is
available at
link:[http://www.altera.com/]

Compilation
~~~~~~~~~~~
To compile the firmware open the dds_controller.qpf file in quartus II and press ctrl - L

To program the firmware on the FPGA open the Programmer in quartus II and select
active-serial-programming. Add the file dds_controller.pof for programming and press start.


Bus definition
~~~~~~~~~~~~~~
The control bits in the instruction word are:

`---------------------------`--------------------------
Function                       Bus bits used
-------------------------------------------------------
opcode                          (31:27)
data available                  (26)
address (not implemented)       (25:22)
phase register wren             (21)
phase register set current      (20)
phase register address          (16:19)
data bus                        (15:0)
--------------------------------------------------


The opcodes are:

`-----------------`--------------------------
Function            Opcode
---------------------------------------------
nop                 0x0
dds address         0x1
fifo write          0x2
dds profile         0x3
dds update          0x4
dac amplitude       0x7
dds phase           0x8
load phase          0x9
load wren           0xa
pulse phase         0xb
fifo reset          0x1f
---------------------------------------------

A typical write process consists of following three pulses:

- Set the data bus , bits(15:0)
- Set opcode, dds address and other bits except data available bit(25)
- Set data available bit(25)

DDS interface
~~~~~~~~~~~~~

The ad9910 dds has internal registers which determine the mode of operation.
These registers have to be programmed over a serial SPI interface.
To speed up the data transfer from the PCP to the DDS the data is transmitted over
the parallel board to the FPGA on the DDS board. This data is then written into the
DDS via the serial interface.
Each configuration register has to be programmed at once. As the registers are up to
64Bits wide the data from the PCP is stored in a FIFO implemented the FPGA on the
DDS board.

A write cycle to  the DDS is accomplished as follows:

- The data is split in 16bit words
- This words are transmitted from the PCP to the FPGA
- The 8 bit address word of the register is transmitted
- The FIFO is read until it is empty


Programming guide
-------------------

Writing a register on the dds
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- Split the data in 16bit words
- Write the data subsequentially into the FIFO with the fifo write insn
- Set the upper 8 bits of the data bus to the desired address
- Provide the dds address Opcode and the address data until the register is set

Load the phase register
~~~~~~~~~~~~~~~~~~~~~~~
- Split the frequency tuning word into two 16Bit words
- Write the lower word with wren=0 and set current=0 and the load phase opcode
- Write the upper word with wren=0 and set current=1 and the load phase opcode
- Set the phase register address bits
- Write load_wren_opcode and set_current=1 do not change data on pins 0:15

Phase coherent switching
~~~~~~~~~~~~~~~~~~~~~~~~
This is not properly implemented yet

- Set the dds frequency either by writing the register or the profile
- Provide the pulse phase opcode
- Wait 4 cycles
- Provide the dds update opcode

Set the DAC
~~~~~~~~~~~

- Set the data bus bits (13:0)
- Provide the dac amplitude opcode

License
-------

This work is published under the GNU Public License

The file phase_regsiter.vhd is copyright by Paul Pham
and released under the BSD License.
